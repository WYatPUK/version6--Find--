/********************
Profile:
筛选比例为：1.01
共找到240个阻值
SForm   引脚值   GForm
0x0f40 0x3e00 60.7497 100 330 470 1000 3300 
0x0f80 0x3c00 61.889 100 330 470 1000 
0x1000 0x3b00 63.8009 100 330 470 3300 4700 
0x1040 0x3a00 64.6789 100 330 470 3300 
0x1080 0x3800 65.9719 100 330 470 
0x1140 0x3700 68.747 100 330 1000 3300 4700 
0x1180 0x3600 69.7674 100 330 1000 3300 
0x11c0 0x3400 71.2743 100 330 1000 
0x1280 0x3300 73.822 100 330 3300 4700 
0x12c0 0x3200 75 100 330 3300 
0x1300 0x30e0 75.8617 100 330 10000 33000 47000 
0x1340 0x3000 76.7442 100 330 
0x13c0 0x2b00 79.0923 100 470 3300 4700 
0x1400 0x2a00 80.4461 100 470 3300 
0x1480 0x2800 82.4561 100 470 
0x15c0 0x2700 86.8372 100 1000 3300 4700 
0x1600 0x2600 88.4718 100 1000 3300 
0x1680 0x24c0 89.8448 100 1000 10000 33000 
0x16c0 0x2400 90.9091 100 1000 
0x1780 0x23c0 93.9311 100 3300 4700 10000 33000 
0x17c0 0x2300 95.095 100 3300 4700 
0x1800 0x228c 96.0782 100 3300 10000 330000 470000 
0x1840 0x2200 97.0588 100 3300 
0x18c0 0x20c0 98.7137 100 10000 33000 
0x1900 0x2000 100 100 
0x2580 0x1f00 149.841 330 470 1000 3300 4700 
0x2600 0x1e80 152.416 330 470 1000 3300 10000 
0x26c0 0x1e00 154.775 330 470 1000 3300 
0x2740 0x1d00 156.968 330 470 1000 4700 
0x2800 0x1c80 159.796 330 470 1000 10000 
0x2880 0x1c00 162.391 330 470 1000 
0x2b40 0x1b80 173.197 330 470 3300 4700 10000 
0x2c00 0x1b00 176.25 330 470 3300 4700 
0x2d00 0x1a80 179.824 330 470 3300 10000 
0x2dc0 0x1a00 183.117 330 470 3300 
0x2e80 0x1900 186.194 330 470 4700 
0x2f80 0x1880 190.188 330 470 10000 
0x3080 0x1800 193.875 330 470 
0x35c0 0x1780 215.234 330 1000 3300 4700 10000 
0x3700 0x1700 219.969 330 1000 3300 4700 
0x3880 0x1680 225.564 330 1000 3300 10000 
0x3900 0x1660 228.055 330 1000 3300 33000 47000 
0x39c0 0x1600 230.769 330 1000 3300 
0x3b00 0x1500 235.678 330 1000 4700 
0x3bc0 0x14e0 239.127 330 1000 10000 33000 47000 
0x3c80 0x1480 242.113 330 1000 10000 
0x3d40 0x1460 244.985 330 1000 33000 47000 
0x3e00 0x1400 248.12 330 1000 
0x42c0 0x0f80 267.133 470 1000 3300 4700 10000 
0x4480 0x1380 274.266 330 3300 4700 10000 
0x4580 0x1360 277.957 330 3300 4700 33000 47000 
0x4680 0x1300 282 330 3300 4700 
0x47c0 0x12e0 286.951 330 3300 10000 33000 47000 
0x48c0 0x1280 291.262 330 3300 10000 
0x49c0 0x1260 295.429 330 3300 33000 47000 
0x4b00 0x1200 300 330 3300 
0x4c00 0x1160 303.523 330 4700 33000 47000 
0x4d00 0x1100 308.35 330 4700 
0x4e80 0x10e0 314.279 330 10000 33000 47000 
0x4fc0 0x1080 319.458 330 10000 
0x5100 0x1060 324.477 330 33000 47000 
0x5280 0x1000 330 330 
0x5a40 0x0bc0 360.522 470 3300 4700 10000 33000 
0x5b40 0x0b80 364.504 470 3300 4700 10000 
0x5d80 0x0b40 374.005 470 3300 4700 33000 
0x5e80 0x0b00 378.293 470 3300 4700 
0x6180 0x0ac0 390.474 470 3300 10000 33000 
0x62c0 0x0a80 395.149 470 3300 10000 
0x6440 0x0a70 401.241 470 3300 33000 47000 100000 
0x6580 0x0a40 406.34 470 3300 33000 
0x66c0 0x0a00 411.406 470 3300 
0x6800 0x0970 416.319 470 4700 33000 47000 100000 
0x6980 0x0940 421.811 470 4700 33000 
0x6ac0 0x0900 427.273 470 4700 
0x6d40 0x08f0 436.826 470 10000 33000 47000 100000 
0x6ec0 0x08c0 442.877 470 10000 33000 
0x7040 0x0880 448.902 470 10000 
0x7240 0x0870 456.78 470 33000 47000 100000 
0x73c0 0x0840 463.4 470 33000 
0x7580 0x0800 470 470 
0x97c0 0x07c0 607.497 1000 3300 4700 10000 33000 
0x9ac0 0x0780 618.89 1000 3300 4700 10000 
0x9f80 0x0760 638.009 1000 3300 4700 33000 47000 
0xa1c0 0x0740 646.789 1000 3300 4700 33000 
0xa500 0x0700 659.719 1000 3300 4700 
0xabc0 0x06e0 687.47 1000 3300 10000 33000 47000 
0xae80 0x06c0 697.674 1000 3300 10000 33000 
0xb240 0x0680 712.743 1000 3300 10000 
0xb880 0x0660 738.22 1000 3300 33000 47000 
0xbb80 0x0640 750 1000 3300 33000 
0xbe00 0x0618 759.843 1000 3300 100000 330000 
0xbfc0 0x0600 767.442 1000 3300 
0xc5c0 0x0560 790.923 1000 4700 33000 47000 
0xc900 0x0540 804.461 1000 4700 33000 
0xcc00 0x0518 815.796 1000 4700 100000 330000 
0xce40 0x0500 824.561 1000 4700 
0xd900 0x04e0 868.372 1000 10000 33000 47000 
0xdd40 0x04c0 884.718 1000 10000 33000 
0xe080 0x0498 898.448 1000 10000 100000 330000 
0xe340 0x0480 909.091 1000 10000 
0xeac0 0x0478 939.311 1000 33000 47000 100000 330000 
0xedc0 0x0460 950.95 1000 33000 47000 
0xf2c0 0x0440 970.588 1000 33000 
0xf6c0 0x0418 987.137 1000 100000 330000 
0xfa00 0x0400 1000 1000 
0xbb41 0x03e0 1498.41 3300 4700 10000 33000 47000 
0xbe81 0x03d0 1524.16 3300 4700 10000 33000 100000 
0xc181 0x03c0 1547.75 3300 4700 10000 33000 
0xc441 0x03a0 1569.68 3300 4700 10000 47000 
0xc7c1 0x0390 1597.96 3300 4700 10000 100000 
0xcb01 0x0380 1623.91 3300 4700 10000 
0xd881 0x0370 1731.97 3300 4700 33000 47000 100000 
0xdc41 0x0360 1762.5 3300 4700 33000 47000 
0xe0c1 0x0350 1798.24 3300 4700 33000 100000 
0xe4c1 0x0340 1831.17 3300 4700 33000 
0xe8c1 0x0320 1861.94 3300 4700 47000 
0xedc1 0x0310 1901.88 3300 4700 100000 
0xf241 0x0300 1938.75 3300 4700 
0x8682 0x02f0 2152.34 3300 10000 33000 47000 100000 
0x8982 0x02e0 2199.69 3300 10000 33000 47000 
0x8d02 0x02d0 2255.64 3300 10000 33000 100000 
0x8e82 0x02cc 2280.55 3300 10000 33000 330000 470000 
0x9042 0x02c0 2307.69 3300 10000 33000 
0x9342 0x02a0 2356.78 3300 10000 47000 
0x9542 0x029c 2391.27 3300 10000 100000 330000 470000 
0x9742 0x0290 2421.13 3300 10000 100000 
0x9902 0x028c 2449.85 3300 10000 330000 470000 
0x9b02 0x0280 2481.2 3300 10000 
0xa6c2 0x01f0 2671.33 4700 10000 33000 47000 100000 
0xab42 0x0270 2742.66 3300 33000 47000 100000 
0xadc2 0x026c 2779.57 3300 33000 47000 330000 470000 
0xb042 0x0260 2820 3300 33000 47000 
0xb342 0x025c 2869.51 3300 33000 100000 330000 470000 
0xb602 0x0250 2912.62 3300 33000 100000 
0xb882 0x024c 2954.29 3300 33000 330000 470000 
0xbb82 0x0240 3000 3300 33000 
0xbd82 0x022c 3035.23 3300 47000 330000 470000 
0xc082 0x0220 3083.5 3300 47000 
0xc442 0x021c 3142.79 3300 100000 330000 470000 
0xc782 0x0210 3194.58 3300 100000 
0xcac2 0x020c 3244.77 3300 330000 470000 
0xce42 0x0200 3300 3300 
0xe142 0x0178 3605.22 4700 33000 47000 100000 330000 
0xe3c2 0x0170 3645.04 4700 33000 47000 100000 
0xe9c2 0x0168 3740.05 4700 33000 47000 330000 
0xec42 0x0160 3782.93 4700 33000 47000 
0xf402 0x0158 3904.74 4700 33000 100000 330000 
0xf6c2 0x0150 3951.49 4700 33000 100000 
0xfac2 0x014e 4012.41 4700 33000 330000 470000 1e+006 
0xfdc2 0x0148 4063.4 4700 33000 330000 
0x8083 0x0140 4114.06 4700 33000 
0x8203 0x012e 4163.19 4700 47000 330000 470000 1e+006 
0x83c3 0x0128 4218.11 4700 47000 330000 
0x8583 0x0120 4272.73 4700 47000 
0x8883 0x011e 4368.26 4700 100000 330000 470000 1e+006 
0x8a43 0x0118 4428.77 4700 100000 330000 
0x8c43 0x0110 4489.02 4700 100000 
0x8ec3 0x010e 4567.8 4700 330000 470000 1e+006 
0x90c3 0x0108 4634 4700 330000 
0x92c3 0x0100 4700 4700 
0xbdc3 0x00f8 6074.97 10000 33000 47000 100000 330000 
0xc143 0x00f0 6188.9 10000 33000 47000 100000 
0xc743 0x00ec 6380.09 10000 33000 47000 330000 470000 
0xca03 0x00e8 6467.89 10000 33000 47000 330000 
0xce03 0x00e0 6597.19 10000 33000 47000 
0xd6c3 0x00dc 6874.7 10000 33000 100000 330000 470000 
0xda03 0x00d8 6976.74 10000 33000 100000 330000 
0xde83 0x00d0 7127.43 10000 33000 100000 
0xe683 0x00cc 7382.2 10000 33000 330000 470000 
0xea43 0x00c8 7500 10000 33000 330000 
0xefc3 0x00c0 7674.42 10000 33000 
0xf703 0x00ac 7909.23 10000 47000 330000 470000 
0xfb43 0x00a8 8044.61 10000 47000 330000 
0x80c4 0x00a0 8245.61 10000 47000 
0x8784 0x009c 8683.72 10000 100000 330000 470000 
0x8a04 0x0098 8847.18 10000 100000 330000 
0x8e04 0x0090 9090.91 10000 100000 
0x9304 0x008f 9411.06 10000 330000 470000 1e+006 1e+007 
0x9484 0x008c 9509.5 10000 330000 470000 
0x9784 0x0088 9705.88 10000 330000 
0x9a84 0x0083 9891.2 10000 1e+006 1e+007 
0x9c44 0x0080 10000 10000 
0xea04 0x007c 14984.1 33000 47000 100000 330000 470000 
0xee04 0x007a 15241.6 33000 47000 100000 330000 1e+006 
0xf1c4 0x0078 15477.5 33000 47000 100000 330000 
0xf544 0x0074 15696.8 33000 47000 100000 470000 
0xf984 0x0072 15979.6 33000 47000 100000 1e+006 
0xfd84 0x0070 16239.1 33000 47000 100000 
0x8745 0x006e 17319.7 33000 47000 330000 470000 1e+006 
0x8985 0x006c 17625 33000 47000 330000 470000 
0x8c45 0x006a 17982.4 33000 47000 330000 1e+006 
0x8f05 0x0068 18311.7 33000 47000 330000 
0x9145 0x0064 18619.4 33000 47000 470000 
0x9485 0x0062 19018.8 33000 47000 1e+006 
0x9745 0x0060 19387.5 33000 47000 
0xa805 0x005e 21523.4 33000 100000 330000 470000 1e+006 
0xabc5 0x005c 21996.9 33000 100000 330000 470000 
0xb005 0x005a 22556.4 33000 100000 330000 1e+006 
0xb445 0x0058 23076.9 33000 100000 330000 
0xb805 0x0054 23567.8 33000 100000 470000 
0xbd05 0x0052 24211.3 33000 100000 1e+006 
0xc1c5 0x0050 24812 33000 100000 
0xd085 0x003e 26713.3 47000 100000 330000 470000 1e+006 
0xd645 0x004e 27426.6 33000 330000 470000 1e+006 
0xdc45 0x004c 28200 33000 330000 470000 
0xe385 0x004a 29126.2 33000 330000 1e+006 
0xea45 0x0048 30000 33000 330000 
0xf0c5 0x0044 30835 33000 470000 
0xf985 0x0042 31945.8 33000 1e+006 
0x80c6 0x0040 33000 33000 
0x8e46 0x002e 36450.4 47000 330000 470000 1e+006 
0x93c6 0x002c 37829.3 47000 330000 470000 
0x9a46 0x002a 39514.9 47000 330000 1e+006 
0xa086 0x0028 41140.6 47000 330000 
0xa6c6 0x0024 42727.3 47000 470000 
0xaf46 0x0022 44890.2 47000 1e+006 
0xb786 0x0020 47000 47000 
0xf1c6 0x001e 61889 100000 330000 470000 1e+006 
0x80c7 0x001c 65971.9 100000 330000 470000 
0x8b07 0x001a 71274.3 100000 330000 1e+006 
0x9387 0x0017 75599.2 100000 470000 1e+006 1e+007 
0x95c7 0x0018 76744.2 100000 330000 
0xa107 0x0014 82456.1 100000 470000 
0xb187 0x0012 90909.1 100000 1e+006 
0xc147 0x0011 99009.9 100000 1e+007 
0xc347 0x0010 100000 100000 
0x9c08 0x000f 159796 330000 470000 1e+006 1e+007 
0x9e88 0x000e 162391 330000 470000 1e+006 
0xb988 0x000d 190188 330000 470000 1e+007 
0xbd48 0x000c 193875 330000 470000 
0xec48 0x000b 242113 330000 1e+006 1e+007 
0xf248 0x000a 248120 330000 1e+006 
0x9749 0x0007 309822 470000 1e+006 1e+007 
0x9bc9 0x0009 319458 330000 1e+007 
0xa109 0x0008 330000 330000 
0xdb09 0x0005 448902 470000 1e+007 
0xe549 0x0004 470000 470000 
0xddca 0x0003 909091 1e+006 1e+007 
0xf40a 0x0002 1e+006 1e+006 
0x988e 0x0001 1e+007 1e+007 
********************/
#define Possible_Num 240
const unsigned int FootR[240] = {
0x3e00, 0x3c00, 0x3b00, 0x3a00, 0x3800, 0x3700, 0x3600, 0x3400, 0x3300, 0x3200, 
0x30e0, 0x3000, 0x2b00, 0x2a00, 0x2800, 0x2700, 0x2600, 0x24c0, 0x2400, 0x23c0, 
0x2300, 0x228c, 0x2200, 0x20c0, 0x2000, 0x1f00, 0x1e80, 0x1e00, 0x1d00, 0x1c80, 
0x1c00, 0x1b80, 0x1b00, 0x1a80, 0x1a00, 0x1900, 0x1880, 0x1800, 0x1780, 0x1700, 
0x1680, 0x1660, 0x1600, 0x1500, 0x14e0, 0x1480, 0x1460, 0x1400, 0x0f80, 0x1380, 
0x1360, 0x1300, 0x12e0, 0x1280, 0x1260, 0x1200, 0x1160, 0x1100, 0x10e0, 0x1080, 
0x1060, 0x1000, 0x0bc0, 0x0b80, 0x0b40, 0x0b00, 0x0ac0, 0x0a80, 0x0a70, 0x0a40, 
0x0a00, 0x0970, 0x0940, 0x0900, 0x08f0, 0x08c0, 0x0880, 0x0870, 0x0840, 0x0800, 
0x07c0, 0x0780, 0x0760, 0x0740, 0x0700, 0x06e0, 0x06c0, 0x0680, 0x0660, 0x0640, 
0x0618, 0x0600, 0x0560, 0x0540, 0x0518, 0x0500, 0x04e0, 0x04c0, 0x0498, 0x0480, 
0x0478, 0x0460, 0x0440, 0x0418, 0x0400, 0x03e0, 0x03d0, 0x03c0, 0x03a0, 0x0390, 
0x0380, 0x0370, 0x0360, 0x0350, 0x0340, 0x0320, 0x0310, 0x0300, 0x02f0, 0x02e0, 
0x02d0, 0x02cc, 0x02c0, 0x02a0, 0x029c, 0x0290, 0x028c, 0x0280, 0x01f0, 0x0270, 
0x026c, 0x0260, 0x025c, 0x0250, 0x024c, 0x0240, 0x022c, 0x0220, 0x021c, 0x0210, 
0x020c, 0x0200, 0x0178, 0x0170, 0x0168, 0x0160, 0x0158, 0x0150, 0x014e, 0x0148, 
0x0140, 0x012e, 0x0128, 0x0120, 0x011e, 0x0118, 0x0110, 0x010e, 0x0108, 0x0100, 
0x00f8, 0x00f0, 0x00ec, 0x00e8, 0x00e0, 0x00dc, 0x00d8, 0x00d0, 0x00cc, 0x00c8, 
0x00c0, 0x00ac, 0x00a8, 0x00a0, 0x009c, 0x0098, 0x0090, 0x008f, 0x008c, 0x0088, 
0x0083, 0x0080, 0x007c, 0x007a, 0x0078, 0x0074, 0x0072, 0x0070, 0x006e, 0x006c, 
0x006a, 0x0068, 0x0064, 0x0062, 0x0060, 0x005e, 0x005c, 0x005a, 0x0058, 0x0054, 
0x0052, 0x0050, 0x003e, 0x004e, 0x004c, 0x004a, 0x0048, 0x0044, 0x0042, 0x0040, 
0x002e, 0x002c, 0x002a, 0x0028, 0x0024, 0x0022, 0x0020, 0x001e, 0x001c, 0x001a, 
0x0017, 0x0018, 0x0014, 0x0012, 0x0011, 0x0010, 0x000f, 0x000e, 0x000d, 0x000c, 
0x000b, 0x000a, 0x0007, 0x0009, 0x0008, 0x0005, 0x0004, 0x0003, 0x0002, 0x0001 };

const unsigned int SListR[240] = {
0x0f40, 0x0f80, 0x1000, 0x1040, 0x1080, 0x1140, 0x1180, 0x11c0, 0x1280, 0x12c0, 
0x1300, 0x1340, 0x13c0, 0x1400, 0x1480, 0x15c0, 0x1600, 0x1680, 0x16c0, 0x1780, 
0x17c0, 0x1800, 0x1840, 0x18c0, 0x1900, 0x2580, 0x2600, 0x26c0, 0x2740, 0x2800, 
0x2880, 0x2b40, 0x2c00, 0x2d00, 0x2dc0, 0x2e80, 0x2f80, 0x3080, 0x35c0, 0x3700, 
0x3880, 0x3900, 0x39c0, 0x3b00, 0x3bc0, 0x3c80, 0x3d40, 0x3e00, 0x42c0, 0x4480, 
0x4580, 0x4680, 0x47c0, 0x48c0, 0x49c0, 0x4b00, 0x4c00, 0x4d00, 0x4e80, 0x4fc0, 
0x5100, 0x5280, 0x5a40, 0x5b40, 0x5d80, 0x5e80, 0x6180, 0x62c0, 0x6440, 0x6580, 
0x66c0, 0x6800, 0x6980, 0x6ac0, 0x6d40, 0x6ec0, 0x7040, 0x7240, 0x73c0, 0x7580, 
0x97c0, 0x9ac0, 0x9f80, 0xa1c0, 0xa500, 0xabc0, 0xae80, 0xb240, 0xb880, 0xbb80, 
0xbe00, 0xbfc0, 0xc5c0, 0xc900, 0xcc00, 0xce40, 0xd900, 0xdd40, 0xe080, 0xe340, 
0xeac0, 0xedc0, 0xf2c0, 0xf6c0, 0xfa00, 0xbb41, 0xbe81, 0xc181, 0xc441, 0xc7c1, 
0xcb01, 0xd881, 0xdc41, 0xe0c1, 0xe4c1, 0xe8c1, 0xedc1, 0xf241, 0x8682, 0x8982, 
0x8d02, 0x8e82, 0x9042, 0x9342, 0x9542, 0x9742, 0x9902, 0x9b02, 0xa6c2, 0xab42, 
0xadc2, 0xb042, 0xb342, 0xb602, 0xb882, 0xbb82, 0xbd82, 0xc082, 0xc442, 0xc782, 
0xcac2, 0xce42, 0xe142, 0xe3c2, 0xe9c2, 0xec42, 0xf402, 0xf6c2, 0xfac2, 0xfdc2, 
0x8083, 0x8203, 0x83c3, 0x8583, 0x8883, 0x8a43, 0x8c43, 0x8ec3, 0x90c3, 0x92c3, 
0xbdc3, 0xc143, 0xc743, 0xca03, 0xce03, 0xd6c3, 0xda03, 0xde83, 0xe683, 0xea43, 
0xefc3, 0xf703, 0xfb43, 0x80c4, 0x8784, 0x8a04, 0x8e04, 0x9304, 0x9484, 0x9784, 
0x9a84, 0x9c44, 0xea04, 0xee04, 0xf1c4, 0xf544, 0xf984, 0xfd84, 0x8745, 0x8985, 
0x8c45, 0x8f05, 0x9145, 0x9485, 0x9745, 0xa805, 0xabc5, 0xb005, 0xb445, 0xb805, 
0xbd05, 0xc1c5, 0xd085, 0xd645, 0xdc45, 0xe385, 0xea45, 0xf0c5, 0xf985, 0x80c6, 
0x8e46, 0x93c6, 0x9a46, 0xa086, 0xa6c6, 0xaf46, 0xb786, 0xf1c6, 0x80c7, 0x8b07, 
0x9387, 0x95c7, 0xa107, 0xb187, 0xc147, 0xc347, 0x9c08, 0x9e88, 0xb988, 0xbd48, 
0xec48, 0xf248, 0x9749, 0x9bc9, 0xa109, 0xdb09, 0xe549, 0xddca, 0xf40a, 0x988e };

sbit R0p = P2^1; //10M
sbit R1p = P2^2; //1M
sbit R2p = P2^3; //470K
sbit R3p = P2^4; //330K
sbit R4p = P2^5; //100K
sbit R5p = P2^6; //47K
sbit R6p = P2^7; //33K
sbit R7p = P0^6; //10K
sbit R8p = P0^5; //4K7
sbit R9p = P0^4; //3K3
sbit Rap = P0^3; //1K
sbit Rbp = P0^2; //470
sbit Rcp = P0^1; //330
sbit Rdp = P0^0; //100
				
void set0(char x){R0p = x;}
void set1(char x){R1p = x;}
void set2(char x){R2p = x;}
void set3(char x){R3p = x;}
void set4(char x){R4p = x;}
void set5(char x){R5p = x;}
void set6(char x){R6p = x;}
void set7(char x){R7p = x;}
void set8(char x){R8p = x;}
void set9(char x){R9p = x;}
void seta(char x){Rap = x;}
void setb(char x){Rbp = x;}
void setc(char x){Rcp = x;}
void setd(char x){Rdp = x;}
/*
typedef void (*SetFoot_Type[]) (char);	   
SetFoot_Type SetFoot = 
{
	set0, set1,	set2, set3,	set4, set5,	set6, set7, set8, set9, seta, setb, setc, setd
};*/
void SetFoot (char f, char x)
{
	switch (f)
	{
		case 0:
			set0(x);
			break;
		case 1:
			set1(x);
			break;
		case 2:
			set2(x);
			break;
		case 3:
			set3(x);
			break;
		case 4:
			set4(x);
			break;
		case 5:
			set5(x);
			break;
		case 6:
			set6(x);
			break;
		case 7:
			set7(x);
			break;
		case 8:
			set8(x);
			break;
		case 9:
			set9(x);
			break;
		case 10:
			seta(x);
			break;
		case 11:
			setb(x);
			break;
		case 12:
			setc(x);
			break;
		case 13:
			setd(x);
			break;
	}
}
void R_ClearAll()
{
	int i;
	for (i=0; i<14; i++)
	{
		SetFoot(i, 0);
	}
}



unsigned int Num;
unsigned int Index;
void Recognize_Resistance(unsigned int x)
{
	Num = (x>>6) & 0x03ff;
	Index = x &	0x003f;
}
char Cpr (int s)
{
	unsigned int x = SListR[s];
	unsigned int Resistance_Index = x & 0x003f;
	unsigned int Resistance_Num = (x>>6) & 0x03ff;
	if (Index > Resistance_Index) return 1;
	if (Index < Resistance_Index) return -1;
	//剩下的就是指数相同，则比较底数。。要求生成函数遵守一定之规
	if (Num > Resistance_Num) return 1;
	if (Num < Resistance_Num) return -1;
	return 0;
}
char WhichNearer(int slow, int shigh)	 //要求slow一定比shigh要小，且目标一定在他们之间
{
	unsigned int x;
	unsigned int Resistance_Index;
	unsigned int Resistance_Num;
	double lowratio;
	double highratio;
	x = SListR[slow];
	Resistance_Index = x & 0x003f;
	Resistance_Num = (x>>6) & 0x03ff;
	lowratio = (1<<(Index-Resistance_Index)) * (double)Num / Resistance_Num;
	x = SListR[shigh];
	Resistance_Index = x & 0x003f;
	Resistance_Num = (x>>6) & 0x03ff;
	highratio = (1<<(Resistance_Index - Index)) * (double)Resistance_Num / Num;
	if (lowratio>=1 && highratio>=1)
	{
		if (lowratio < highratio) return slow;
		return shigh;
	}
	return 0;	
}
int Find_Nearist (unsigned int x)
{
	unsigned int slow, shigh, saverage;
	char cprl, cprh, cpra;
	Recognize_Resistance(x);
	slow = 0;
	shigh = Possible_Num - 1;
	while (1)
	{
		cprl = Cpr(slow);
		cprh = Cpr(shigh);
		if (cprl <= 0) return slow;
		if (cprh >= 0) return shigh;
		saverage = (slow + shigh) / 2;
		SendCharHex(saverage>>4 & 0xff);
		SendCharHex(saverage & 0xff);
		SendCharHex(0);
		if (saverage == slow)//说明shigh和slow只差1了，只需要比较哪个更接近就行了
		{
			if (WhichNearer(slow, shigh)) return slow;
			return shigh;
		}
		cpra = Cpr(saverage);
		if (cpra == 0) return saverage;
		if (cpra>0) // 在右区间内
		{
			slow = saverage;
		}
		else shigh = saverage; // 在左区间内
	}
}
char Excute (int nearist)
{
	int i;
	R_ClearAll();
	if (nearist>=0 && nearist<Possible_Num)
	{
		for (i=0; i<14; i++)
		{
			if ((FootR[nearist]>>i) & 1) SetFoot(i, 1);
		}
		return 1; 
	}
	return 0;
}	